//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace VL.ItsMe1110.SubjectUserService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SubjectUserService.ISubjectUserService")]
    public interface ISubjectUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServiceNode/CheckAlive", ReplyAction="http://tempuri.org/IWCFServiceNode/CheckAliveResponse")]
        bool CheckAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServiceNode/CheckAlive", ReplyAction="http://tempuri.org/IWCFServiceNode/CheckAliveResponse")]
        System.Threading.Tasks.Task<bool> CheckAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServiceNode/CheckNodeReferences", ReplyAction="http://tempuri.org/IWCFServiceNode/CheckNodeReferencesResponse")]
        VL.Common.Object.Protocol.DependencyResult CheckNodeReferences();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFServiceNode/CheckNodeReferences", ReplyAction="http://tempuri.org/IWCFServiceNode/CheckNodeReferencesResponse")]
        System.Threading.Tasks.Task<VL.Common.Object.Protocol.DependencyResult> CheckNodeReferencesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubjectUserService/CreateUser", ReplyAction="http://tempuri.org/ISubjectUserService/CreateUserResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(VL.Common.Object.Protocol.Report<VL.Common.Object.VL.User.ESignInStatus>))]
        VL.Common.Object.Protocol.Report CreateUser(VL.Common.Object.VL.User.TUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubjectUserService/CreateUser", ReplyAction="http://tempuri.org/ISubjectUserService/CreateUserResponse")]
        System.Threading.Tasks.Task<VL.Common.Object.Protocol.Report> CreateUserAsync(VL.Common.Object.VL.User.TUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubjectUserService/AuthenticateUser", ReplyAction="http://tempuri.org/ISubjectUserService/AuthenticateUserResponse")]
        VL.Common.Object.Protocol.Report<VL.Common.Object.VL.User.ESignInStatus> AuthenticateUser(VL.Common.Object.VL.User.TUser user, bool rememberMe, bool shouldLockout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubjectUserService/AuthenticateUser", ReplyAction="http://tempuri.org/ISubjectUserService/AuthenticateUserResponse")]
        System.Threading.Tasks.Task<VL.Common.Object.Protocol.Report<VL.Common.Object.VL.User.ESignInStatus>> AuthenticateUserAsync(VL.Common.Object.VL.User.TUser user, bool rememberMe, bool shouldLockout);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISubjectUserServiceChannel : VL.ItsMe1110.SubjectUserService.ISubjectUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubjectUserServiceClient : System.ServiceModel.ClientBase<VL.ItsMe1110.SubjectUserService.ISubjectUserService>, VL.ItsMe1110.SubjectUserService.ISubjectUserService {
        
        public SubjectUserServiceClient() {
        }
        
        public SubjectUserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SubjectUserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SubjectUserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SubjectUserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CheckAlive() {
            return base.Channel.CheckAlive();
        }
        
        public System.Threading.Tasks.Task<bool> CheckAliveAsync() {
            return base.Channel.CheckAliveAsync();
        }
        
        public VL.Common.Object.Protocol.DependencyResult CheckNodeReferences() {
            return base.Channel.CheckNodeReferences();
        }
        
        public System.Threading.Tasks.Task<VL.Common.Object.Protocol.DependencyResult> CheckNodeReferencesAsync() {
            return base.Channel.CheckNodeReferencesAsync();
        }
        
        public VL.Common.Object.Protocol.Report CreateUser(VL.Common.Object.VL.User.TUser user) {
            return base.Channel.CreateUser(user);
        }
        
        public System.Threading.Tasks.Task<VL.Common.Object.Protocol.Report> CreateUserAsync(VL.Common.Object.VL.User.TUser user) {
            return base.Channel.CreateUserAsync(user);
        }
        
        public VL.Common.Object.Protocol.Report<VL.Common.Object.VL.User.ESignInStatus> AuthenticateUser(VL.Common.Object.VL.User.TUser user, bool rememberMe, bool shouldLockout) {
            return base.Channel.AuthenticateUser(user, rememberMe, shouldLockout);
        }
        
        public System.Threading.Tasks.Task<VL.Common.Object.Protocol.Report<VL.Common.Object.VL.User.ESignInStatus>> AuthenticateUserAsync(VL.Common.Object.VL.User.TUser user, bool rememberMe, bool shouldLockout) {
            return base.Channel.AuthenticateUserAsync(user, rememberMe, shouldLockout);
        }
    }
}
